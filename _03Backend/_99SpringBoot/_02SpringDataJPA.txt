Spring Data JPA
	Spring Data JPA is a powerful library within the spring framework that makes data 
	access in Java applications using JPA (Java Persistence API) much easier and more
	efficient.
	Purpose:
		o Simplifies working with relational databases in your spring applications.
		o Eliminates the need for writing boilerplate code for basic CRUD
			(Create, Read, Update, and Delete) operations and complex queries.
	Spring Data JPA will provide implementation for all DAO operations using Proxy Design Pattern.
  spring.jpa.show-sql=true

Benefits:
	Improved developer experience:
		Focus on the business logic of your application instead of data access details.
	Increased productivity:
		Faster development cycles due to simplified data access methods. 
	Automatic entity mapping:
		Spring Data JPA automatically maps your POJOs (Plain Old Java Objects) to database tables based on annotations and conventions, 
		saving you time and effort.
	Support for complex queries:
		While providing convenience for basic operations, Spring Data JPA still allows
		for building complex queries using 
			JPA's Criteria API or     ??????????
			QueryDSL for specific needs.
	Reduced boilerplate code:
		The Spring Data JPA provides the default implementation for common methods by its repository interfaces.
		No more manual creation of DAOs (Data Access Objects) or writing extensive SQL queries.
	Spring Data JPA we can execute queries in 3 ways(https://docs.spring.io/spring-data/jpa/reference/jpa/query-methods.html)
		Using Pre-defined Methods (Repository in built methods)
		By Writing findBy Methods (Spring DSL)
		By Writing custom Queries (@Query(JPQL query) & @NativeQuery)
			@Query("select u from User u where u.emailAddress = ?1")
			@Query("select u from User u where u.emailAddress = :emailAddress") (most used)
		  User findByEmailAddress(String emailAddress);

			@Query("select u from User u where u.emailAddress = :email")
		  User findByEmailAddress(@Param(email)String emailAddress);

			@Query("select p from Product p INNERJOIN Category c on p.id=c.id")
			Product fetchProdcutUsingJoin()

			@Query("select u from User u where u.name LIKE %?1%")

			@Query(value="select * from product",NativeQuery=true)

			Using nativeQuery - call(procedureName)

			Text Block in Java latest versions	
					"""
					"""
 
			Custom vs Derived Queries ???????????


		Using JPA Named Queries
			@Entity
			@NamedQuery(name = "User.findByEmailAddress",query = "select u from User u where u.emailAddress = ?1")
			public class User {		}
		Modifying Queries
			@Modifying
			@Query("update User u set u.firstname = ?1 where u.lastname = ?2")
			int setFixedFirstnameFor(String firstname, String lastname);
		Derived Delete Queries
			@Modifying
		  @Query("delete from User u where u.role.id = ?1")
  		void deleteInBulkByRoleId(long roleId);
		Scrolling
			WindowIterator<User> users = WindowIterator.of(position -> repository.findFirst10ByLastnameOrderByFirstname("Doe", position))
				.startingAt(ScrollPosition.offset());
				while (users.hasNext()) {
					User u = users.next();
					// consume the user
				}


JPQL vs Native Queries
	Platform independent
		Platform dependent
	Entity class & variable name
		Table name & column name
	select p from Product p
		select * from product

How it works:
	Create Java classes annotated with JPA annotations to represent your database entities.
	Define repository interfaces extending Spring Data JPA interfaces like JpaRepository or CrudRepository.
	Spring Data JPA automatically generates implementations for these interfaces at runtime, 
		handling data access logic based on the methods you define.


Database Connection Properties:
	spring.datasource.url=jdbc:mysql://localhost:3306/devflipkart?createDatabaseIfNotExist=true
	spring.datasource.username=root
	spring.datasource.password=India@123
	spring.jpa.hibernate.ddl-auto=update

	jdbc:h2:mem:accountsDB
	spring.h2.console.enabled=true

JPA Annotations:
	1. @Entity:
		The java class which represents DB Table structure is called as Entity class
		The class which is mapped with DB Table is called as Entity Class
		It is class level annotation
		It is mandatory annotation
	2. @Table:
		It is used to map class name to particular name
		It is class level annotation
		It is optional annotation
		If @Table is not mentioned then SB Data considers our class name as table name
	3. @Id:
		It is represent variable which mapped with PK
		It is field level annotation
		It is mandatory annotation
	4. @Column:
		It is used to map entity class variable name with table column name
		It is field level annotation
		It is optional annotation
		If we don't use @Column, SB data will consider variable name as column name
	5. @GeneratedValue (strategy = GenerationType.IDENTITY)
		It is database dependent
		Doesn't support for Oracle
		Supports for MySQL


Schema Generation
	ORM frameworks are having support to generate schema in runtime
	ORM frameworks can create table and can create sequence in runtime required for app
	By Default, Schema Generation mode will be OFF
	To enable schema generation, we will use ddl-auto property
		spring.jpa.hibernate.ddl-auto=create/create-drop/update
	We have several possible values for ddl-auto property
		o Create
		o Create-drop
		o Update
		o Validate
		o None
	create: means every time new table will be created
	create-drop: it creates table and drops table at end of operation
	update: If table is not available it will create if table is already available it will just perform operation
	validate: It is used to validate schema details




Domain Specific Language (DSL):
	Spring data JPA not only provides implementation for commonly used methods but also provides a way to add custom methods.
	Spring Data JPA QueryDSL:

	Supported keywords inside method names
		Keyword					Sample															JPQL snippet
		Distinct				findDistinctByLastnameAndFirstname	select distinct …​ where x.lastname = ?1 and x.firstname = ?2

		And							findByLastnameAndFirstname					… where x.lastname = ?1 and x.firstname = ?2

		Or							findByLastnameOrFirstname						… where x.lastname = ?1 or x.firstname = ?2

		Is, Equals			findByFirstname,findByFirstnameIs,findByFirstnameEquals
																											… where x.firstname = ?1 (or … where x.firstname IS NULL if the argument is null)

		Between					findByStartDateBetween							… where x.startDate between ?1 and ?2

		LessThan				findByAgeLessThan										… where x.age < ?1

		LessThanEqual		findByAgeLessThanEqual							… where x.age <= ?1

		GreaterThan			findByAgeGreaterThan								… where x.age > ?1

		GreaterThanEqual	findByAgeGreaterThanEqual					… where x.age >= ?1

		After						findByStartDateAfter								… where x.startDate > ?1

		Before					findByStartDateBefore								… where x.startDate < ?1

		IsNull, Null 		findByAge(Is)Null										… where x.age is null

		IsNotNull, NotNull		findByAge(Is)NotNull					… where x.age is not null

		Like						findByFirstnameLike									… where x.firstname like ?1

		NotLike     		findByFirstnameNotLike							… where x.firstname not like ?1

		StartingWith		findByFirstnameStartingWith					… where x.firstname like ?1 (parameter bound with appended %)

		EndingWith  		findByFirstnameEndingWith						… where x.firstname like ?1 (parameter bound with prepended %)

		Containing  		findByFirstnameContaining						… where x.firstname like ?1 (parameter bound wrapped in %)

		OrderBy					findByAgeOrderByLastnameDesc				… where x.age = ?1 order by x.lastname desc

		Not 						findByLastnameNot										… where x.lastname <> ?1

		In							findByAgeIn(Collection<Age> ages)		… where x.age in ?1

		NotIn						findByAgeNotIn(Collection<Age> ages)… where x.age not in ?1

		True						findByActiveTrue()									… where x.active = true

		False						findByActiveFalse()									… where x.active = false

		IgnoreCase			findByFirstnameIgnoreCase						… where UPPER(x.firstname) = UPPER(?1)


Development Steps
	1. Create Spring Boot Project
		a. groupid : com.javaexpress
		b. artifactid : any name
		c. version : Java 17
		d. Type : maven
		e. Packaging : jar
		f. Language: java
	2. Add two dependencies
		a. Spring-boot-starter-data-jpa
		b. MySQL-connector-j driver
	3. Add Database properties in application.properties file
	4. Create model package
	a. Add Model Class
	5. Create repository package
		a. Add repository interface
	6. Do operations in main class	
			Using @PostConstruct
			@Override
			public void run(String... args) throw Exception	{	}
			commnadline runner ????????????


JpaRepository vs CrudRepository vs Others
2 database in single project with use case
Criteria Query in JPA ??????????



Transactions in JPA
	https://docs.spring.io/spring-data/jpa/docs/current-SNAPSHOT/reference/html/#transactions
	@EnableTransactionManagement on class
	@Transactional
  public void addRoleToAllUsers(String roleName) {

	@Lock(LockModeType.READ)
  List<User> findAll();

https://www.baeldung.com/database-auditing-jpa
https://docs.spring.io/spring-data/jpa/reference/jpa/query-methods.html



One to Many relationship (Bi-directional)
	public class Category{
		@JsonIgnore
		@OneToMany(mappedBy="category")
		private List<Product> products;
	}

	public class Product{
		@ManyToOne
		@JoinColumn("category_id", nullable=false)
		private Category category;
	}




Pagination
  https://www.baeldung.com/spring-data-jpa-pagination-sorting
  Pageable sortedByName =  PageRequest.of(0, 3, Sort.by("name"));
  Pageable firstPageWithTwoElements = PageRequest.of(0, 2);
  Pageable secondPageWithFiveElements = PageRequest.of(1, 5);
  Page<Product> allProducts = productRepository.findAll(firstPageWithTwoElements);
  List<Product> allTenDollarProducts = productRepository.findAllByPrice(10, secondPageWithFiveElements);



DTO design pattern
	https://www.baeldung.com/java-dto-pattern
	dao vs dto pattern ??



NOSQL
	retrieval is Faster
	unstructured data can be stored
	scalability
		data sharding

MongoDB
	Collection
	json
		key & values
	
	mongo compass client
	docker pull mongo
	docker run -d 27018:27017 --name mongodbname mongo

	mongodb://localhost:27018

	@Dcoment(collection="Category")
	@Id
	extends MongoRepository<Category,String>