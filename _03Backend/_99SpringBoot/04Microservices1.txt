
Microservices Course Index:
  1. Monolithic Architecture Background
  2. Microservice Architecture Background
  3. Difference between Monolithic vs Microservices
  4. Project Architecture Understanding
  5. Developing Individual Microservices as per use case
  6. Spring Cloud Introduction
  7. Service Discovery & Registration
    a. Eureka Server
    b. Eureka Client
    c. Steps to Build Eureka Server
    d. Eureka Server Properties
    e. Steps to Build Eureka Client
    f. Eureka Client Properties
  8. Feign Client Communication between Microservices
    a. Feign Client Introduction
    b. Steps to Build Feign Client
    c. Diagrams
  9. Distributed Tracing
    a. Zipkin Integration
    b. Distributed Tracing Properties
    c. Micrometer Integration
    d. Feign Micrometer
  10. Why Routing is important in Microservices
  11. Spring Cloud Gateway or API Gateway
    a. Architecture Diagram for apigateway
    b. Steps to Build Gateway
    c. Gateway Properties
    d. Config the Routing Config
  12. Circuit Breaker
  13. Centralized Configuration
    a. Config Server
    b. Config Client
    c. Architecture Diagram for Centralized Configuration


Monolithic Architecture Background:
  Traditionally, the application was divided into modules and these modules were built in a single code
  base. This kind of architecture which we call “Monolithic Architecture”. 
  Mono means ‘Single’ and lith means ‘a single block of stone or pillar’. 
  In short, the entire application was built in a single code base. 
  Let’s discuss the cons of this kind of architecture.
   Re-usability: 
    Monolithic applications are not reusable because they use tools out of the box.
    You will not be able to just extract a feature and integrate it into another project.
   Deployment: 
    If there is a small change in any part of the code, you will need to deploy the entire application again.
   Testing: 
    Even a small change causes to test the entire application which can be both time and resource consuming.

What is a Microservice?
   Microservice is an Architectural Design Pattern
   Microservice is not a technology
   Microservice is not a framework
   Microservice is not an API
   Microservices design pattern came into market to avoid the problems of Monolithic Architecture.
   Microservices design pattern not only related to java. It is a universal design pattern anybody can follow this design pattern.

Microservices Architecture Background:
  In modern cloud-based architecture, we use microservices to build and deploy applications.
  Microservices appeared as an alternative to monoliths in order to solve all issues and bottlenecks
  caused by the limitations of the monolithic architecture. 
  Let’s discuss the pros of Microservice architecture.
   Re-usability: 
    We can reuse the microservice in any project without any fear due to its zero dependency.
   Deployment: 
    As each microservice is an individual unit, it’s easy to deploy a unit rather than an entire application.
   Testing: It’s really easy to test the small code base rather than the entire application.


Monolithic vs Microservice  vs Service-Oriented(Enterprise Service Bus)
  Monolithic is built as one large system
    Microservice is built as a small independent module.
  Not easy to scale based on demand
    Easy to scale based on demand
  It has a shared module.
    It has their own database.
  Larde code base makes IDE slow.
    Small code base
  Continious deployment becomes defficult
    Continious deployment is easier.
  It is extremly difficult to change technology or language or framework because everything is tightly coupled & depends on each other.
    Easy to change technology or language or framework because every module & project is loosly coupled & independent.




Microservices Architecture   ??????????????
  UI->API Gateway ->Microservices->Databases

  Config CLient
    Config Server->github
  Eureka Server
    Eureka Client
    Api  Gateway
  Zipkin
  ELK
    Elastic Search
    logstash
    Kibana
  Prometheus
    datasource
    Grafana
      UI
  Resilence Design Pattern
    Circuit Braker Design Pattern


https://www.baeldung.com/apache-commons-beanutils
